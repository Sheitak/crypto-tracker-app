// Mocks generated by Mockito 5.0.17 from annotations
// in crypto_tracker_app/test/data/repositories/coin_repository_impl_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i8;

import 'package:crypto_tracker_app/core/error/failures.dart' as _i9;
import 'package:crypto_tracker_app/core/network/network_info.dart' as _i4;
import 'package:crypto_tracker_app/data/datasources/local/crypto_local_data_source.dart'
    as _i3;
import 'package:crypto_tracker_app/data/datasources/remote/crypto_remote_data_source.dart'
    as _i2;
import 'package:crypto_tracker_app/data/models/request/coin_request.dart'
    as _i12;
import 'package:crypto_tracker_app/data/models/request/coins_list_request.dart'
    as _i11;
import 'package:crypto_tracker_app/data/models/response/coin_response.dart'
    as _i6;
import 'package:crypto_tracker_app/data/models/response/coins_list_response.dart'
    as _i10;
import 'package:crypto_tracker_app/data/repositories/coin_repository_impl.dart'
    as _i7;
import 'package:crypto_tracker_app/domain/entities/coins_list.dart' as _i13;
import 'package:dartz/dartz.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeCryptoRemoteDataSource_0 extends _i1.Fake
    implements _i2.CryptoRemoteDataSource {}

class _FakeCryptoLocalDataSource_1 extends _i1.Fake
    implements _i3.CryptoLocalDataSource {}

class _FakeNetworkInfo_2 extends _i1.Fake implements _i4.NetworkInfo {}

class _FakeEither_3<L, R> extends _i1.Fake implements _i5.Either<L, R> {}

class _FakeCoinResponse_4 extends _i1.Fake implements _i6.CoinResponse {}

/// A class which mocks [CoinRepositoryImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockCoinRepositoryImpl extends _i1.Mock
    implements _i7.CoinRepositoryImpl {
  MockCoinRepositoryImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CryptoRemoteDataSource get cryptoRemoteDataSource =>
      (super.noSuchMethod(Invocation.getter(#cryptoRemoteDataSource),
              returnValue: _FakeCryptoRemoteDataSource_0())
          as _i2.CryptoRemoteDataSource);
  @override
  _i3.CryptoLocalDataSource get cryptoLocalDataSource =>
      (super.noSuchMethod(Invocation.getter(#cryptoLocalDataSource),
              returnValue: _FakeCryptoLocalDataSource_1())
          as _i3.CryptoLocalDataSource);
  @override
  _i4.NetworkInfo get networkInfo =>
      (super.noSuchMethod(Invocation.getter(#networkInfo),
          returnValue: _FakeNetworkInfo_2()) as _i4.NetworkInfo);
  @override
  _i8.Future<_i5.Either<_i9.Failure, List<dynamic>>> getCoinById(
          String? selectedCoin) =>
      (super.noSuchMethod(Invocation.method(#getCoinById, [selectedCoin]),
              returnValue: Future<_i5.Either<_i9.Failure, List<dynamic>>>.value(
                  _FakeEither_3<_i9.Failure, List<dynamic>>()))
          as _i8.Future<_i5.Either<_i9.Failure, List<dynamic>>>);
}

/// A class which mocks [CryptoRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockCryptoRemoteDataSource extends _i1.Mock
    implements _i2.CryptoRemoteDataSource {
  MockCryptoRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<List<_i10.CoinsListResponse>> getCoinsList(
          _i11.CoinsListRequest? request) =>
      (super.noSuchMethod(Invocation.method(#getCoinsList, [request]),
              returnValue: Future<List<_i10.CoinsListResponse>>.value(
                  <_i10.CoinsListResponse>[]))
          as _i8.Future<List<_i10.CoinsListResponse>>);
  @override
  _i8.Future<_i6.CoinResponse> getCoinById(
          String? selectedCoin, _i12.CoinRequest? request) =>
      (super.noSuchMethod(
              Invocation.method(#getCoinById, [selectedCoin, request]),
              returnValue:
                  Future<_i6.CoinResponse>.value(_FakeCoinResponse_4()))
          as _i8.Future<_i6.CoinResponse>);
}

/// A class which mocks [CryptoLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockCryptoLocalDataSource extends _i1.Mock
    implements _i3.CryptoLocalDataSource {
  MockCryptoLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<List<_i13.CoinsList>> getLastCoinsList() => (super.noSuchMethod(
          Invocation.method(#getLastCoinsList, []),
          returnValue: Future<List<_i13.CoinsList>>.value(<_i13.CoinsList>[]))
      as _i8.Future<List<_i13.CoinsList>>);
  @override
  _i8.Future<void> cacheCoinsList(List<_i13.CoinsList>? coinsListToCache) =>
      (super.noSuchMethod(
          Invocation.method(#cacheCoinsList, [coinsListToCache]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<List<dynamic>> getLastCoin(String? selectedCoin) =>
      (super.noSuchMethod(Invocation.method(#getLastCoin, [selectedCoin]),
              returnValue: Future<List<dynamic>>.value(<dynamic>[]))
          as _i8.Future<List<dynamic>>);
  @override
  _i8.Future<void> cacheCoin(List<dynamic>? entitiesListToCache) =>
      (super.noSuchMethod(Invocation.method(#cacheCoin, [entitiesListToCache]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i4.NetworkInfo {
  MockNetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<bool> get isConnected =>
      (super.noSuchMethod(Invocation.getter(#isConnected),
          returnValue: Future<bool>.value(false)) as _i8.Future<bool>);
}
